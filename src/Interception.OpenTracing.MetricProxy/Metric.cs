// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: metricproxy/metric.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Interception.OpenTracing.MetricProxy {

  /// <summary>Holder for reflection information generated from metricproxy/metric.proto</summary>
  public static partial class MetricReflection {

    #region Descriptor
    /// <summary>File descriptor for metricproxy/metric.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MetricReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhtZXRyaWNwcm94eS9tZXRyaWMucHJvdG8SBG1haW4i4gEKC1RyYWNlTWV0",
            "cmljEgwKBFR5cGUYASACKAkSDQoFVmFsdWUYAiACKAESDwoHVHJhY2VJZBgD",
            "IAIoCRIOCgZTcGFuSWQYBCACKAkSFAoMUGFyZW50U3BhbklkGAUgASgJEg8K",
            "B1NlcnZpY2UYBiACKAkSEQoJU3RhcnREYXRlGAcgAigBEhIKCkZpbmlzaERh",
            "dGUYCCACKAESIwoEVGFncxgJIAMoCzIVLm1haW4uVHJhY2VNZXRyaWMuVGFn",
            "GiIKA1RhZxIMCgROYW1lGAEgAigJEg0KBXZhbHVlGAIgAigJQi9aBi47bWFp",
            "bqoCJEludGVyY2VwdGlvbi5PcGVuVHJhY2luZy5NZXRyaWNQcm94eQ=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Interception.OpenTracing.MetricProxy.TraceMetric), global::Interception.OpenTracing.MetricProxy.TraceMetric.Parser, new[]{ "Type", "Value", "TraceId", "SpanId", "ParentSpanId", "Service", "StartDate", "FinishDate", "Tags" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Interception.OpenTracing.MetricProxy.TraceMetric.Types.Tag), global::Interception.OpenTracing.MetricProxy.TraceMetric.Types.Tag.Parser, new[]{ "Name", "Value" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class TraceMetric : pb::IMessage<TraceMetric>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TraceMetric> _parser = new pb::MessageParser<TraceMetric>(() => new TraceMetric());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TraceMetric> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Interception.OpenTracing.MetricProxy.MetricReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceMetric() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceMetric(TraceMetric other) : this() {
      _hasBits0 = other._hasBits0;
      type_ = other.type_;
      value_ = other.value_;
      traceId_ = other.traceId_;
      spanId_ = other.spanId_;
      parentSpanId_ = other.parentSpanId_;
      service_ = other.service_;
      startDate_ = other.startDate_;
      finishDate_ = other.finishDate_;
      tags_ = other.tags_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceMetric Clone() {
      return new TraceMetric(this);
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 1;
    private readonly static string TypeDefaultValue = "";

    private string type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_ ?? TypeDefaultValue; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "Type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return type_ != null; }
    }
    /// <summary>Clears the value of the "Type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      type_ = null;
    }

    /// <summary>Field number for the "Value" field.</summary>
    public const int ValueFieldNumber = 2;
    private readonly static double ValueDefaultValue = 0D;

    private double value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Value {
      get { if ((_hasBits0 & 1) != 0) { return value_; } else { return ValueDefaultValue; } }
      set {
        _hasBits0 |= 1;
        value_ = value;
      }
    }
    /// <summary>Gets whether the "Value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasValue {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "Value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "TraceId" field.</summary>
    public const int TraceIdFieldNumber = 3;
    private readonly static string TraceIdDefaultValue = "";

    private string traceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TraceId {
      get { return traceId_ ?? TraceIdDefaultValue; }
      set {
        traceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "TraceId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTraceId {
      get { return traceId_ != null; }
    }
    /// <summary>Clears the value of the "TraceId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTraceId() {
      traceId_ = null;
    }

    /// <summary>Field number for the "SpanId" field.</summary>
    public const int SpanIdFieldNumber = 4;
    private readonly static string SpanIdDefaultValue = "";

    private string spanId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SpanId {
      get { return spanId_ ?? SpanIdDefaultValue; }
      set {
        spanId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "SpanId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSpanId {
      get { return spanId_ != null; }
    }
    /// <summary>Clears the value of the "SpanId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSpanId() {
      spanId_ = null;
    }

    /// <summary>Field number for the "ParentSpanId" field.</summary>
    public const int ParentSpanIdFieldNumber = 5;
    private readonly static string ParentSpanIdDefaultValue = "";

    private string parentSpanId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ParentSpanId {
      get { return parentSpanId_ ?? ParentSpanIdDefaultValue; }
      set {
        parentSpanId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "ParentSpanId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasParentSpanId {
      get { return parentSpanId_ != null; }
    }
    /// <summary>Clears the value of the "ParentSpanId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearParentSpanId() {
      parentSpanId_ = null;
    }

    /// <summary>Field number for the "Service" field.</summary>
    public const int ServiceFieldNumber = 6;
    private readonly static string ServiceDefaultValue = "";

    private string service_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Service {
      get { return service_ ?? ServiceDefaultValue; }
      set {
        service_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "Service" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasService {
      get { return service_ != null; }
    }
    /// <summary>Clears the value of the "Service" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearService() {
      service_ = null;
    }

    /// <summary>Field number for the "StartDate" field.</summary>
    public const int StartDateFieldNumber = 7;
    private readonly static double StartDateDefaultValue = 0D;

    private double startDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StartDate {
      get { if ((_hasBits0 & 2) != 0) { return startDate_; } else { return StartDateDefaultValue; } }
      set {
        _hasBits0 |= 2;
        startDate_ = value;
      }
    }
    /// <summary>Gets whether the "StartDate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStartDate {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "StartDate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStartDate() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "FinishDate" field.</summary>
    public const int FinishDateFieldNumber = 8;
    private readonly static double FinishDateDefaultValue = 0D;

    private double finishDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double FinishDate {
      get { if ((_hasBits0 & 4) != 0) { return finishDate_; } else { return FinishDateDefaultValue; } }
      set {
        _hasBits0 |= 4;
        finishDate_ = value;
      }
    }
    /// <summary>Gets whether the "FinishDate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFinishDate {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "FinishDate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFinishDate() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "Tags" field.</summary>
    public const int TagsFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Interception.OpenTracing.MetricProxy.TraceMetric.Types.Tag> _repeated_tags_codec
        = pb::FieldCodec.ForMessage(74, global::Interception.OpenTracing.MetricProxy.TraceMetric.Types.Tag.Parser);
    private readonly pbc::RepeatedField<global::Interception.OpenTracing.MetricProxy.TraceMetric.Types.Tag> tags_ = new pbc::RepeatedField<global::Interception.OpenTracing.MetricProxy.TraceMetric.Types.Tag>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Interception.OpenTracing.MetricProxy.TraceMetric.Types.Tag> Tags {
      get { return tags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TraceMetric);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TraceMetric other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Value, other.Value)) return false;
      if (TraceId != other.TraceId) return false;
      if (SpanId != other.SpanId) return false;
      if (ParentSpanId != other.ParentSpanId) return false;
      if (Service != other.Service) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StartDate, other.StartDate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FinishDate, other.FinishDate)) return false;
      if(!tags_.Equals(other.tags_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasType) hash ^= Type.GetHashCode();
      if (HasValue) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Value);
      if (HasTraceId) hash ^= TraceId.GetHashCode();
      if (HasSpanId) hash ^= SpanId.GetHashCode();
      if (HasParentSpanId) hash ^= ParentSpanId.GetHashCode();
      if (HasService) hash ^= Service.GetHashCode();
      if (HasStartDate) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StartDate);
      if (HasFinishDate) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FinishDate);
      hash ^= tags_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasType) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (HasValue) {
        output.WriteRawTag(17);
        output.WriteDouble(Value);
      }
      if (HasTraceId) {
        output.WriteRawTag(26);
        output.WriteString(TraceId);
      }
      if (HasSpanId) {
        output.WriteRawTag(34);
        output.WriteString(SpanId);
      }
      if (HasParentSpanId) {
        output.WriteRawTag(42);
        output.WriteString(ParentSpanId);
      }
      if (HasService) {
        output.WriteRawTag(50);
        output.WriteString(Service);
      }
      if (HasStartDate) {
        output.WriteRawTag(57);
        output.WriteDouble(StartDate);
      }
      if (HasFinishDate) {
        output.WriteRawTag(65);
        output.WriteDouble(FinishDate);
      }
      tags_.WriteTo(output, _repeated_tags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasType) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (HasValue) {
        output.WriteRawTag(17);
        output.WriteDouble(Value);
      }
      if (HasTraceId) {
        output.WriteRawTag(26);
        output.WriteString(TraceId);
      }
      if (HasSpanId) {
        output.WriteRawTag(34);
        output.WriteString(SpanId);
      }
      if (HasParentSpanId) {
        output.WriteRawTag(42);
        output.WriteString(ParentSpanId);
      }
      if (HasService) {
        output.WriteRawTag(50);
        output.WriteString(Service);
      }
      if (HasStartDate) {
        output.WriteRawTag(57);
        output.WriteDouble(StartDate);
      }
      if (HasFinishDate) {
        output.WriteRawTag(65);
        output.WriteDouble(FinishDate);
      }
      tags_.WriteTo(ref output, _repeated_tags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (HasValue) {
        size += 1 + 8;
      }
      if (HasTraceId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TraceId);
      }
      if (HasSpanId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SpanId);
      }
      if (HasParentSpanId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ParentSpanId);
      }
      if (HasService) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Service);
      }
      if (HasStartDate) {
        size += 1 + 8;
      }
      if (HasFinishDate) {
        size += 1 + 8;
      }
      size += tags_.CalculateSize(_repeated_tags_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TraceMetric other) {
      if (other == null) {
        return;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasValue) {
        Value = other.Value;
      }
      if (other.HasTraceId) {
        TraceId = other.TraceId;
      }
      if (other.HasSpanId) {
        SpanId = other.SpanId;
      }
      if (other.HasParentSpanId) {
        ParentSpanId = other.ParentSpanId;
      }
      if (other.HasService) {
        Service = other.Service;
      }
      if (other.HasStartDate) {
        StartDate = other.StartDate;
      }
      if (other.HasFinishDate) {
        FinishDate = other.FinishDate;
      }
      tags_.Add(other.tags_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 17: {
            Value = input.ReadDouble();
            break;
          }
          case 26: {
            TraceId = input.ReadString();
            break;
          }
          case 34: {
            SpanId = input.ReadString();
            break;
          }
          case 42: {
            ParentSpanId = input.ReadString();
            break;
          }
          case 50: {
            Service = input.ReadString();
            break;
          }
          case 57: {
            StartDate = input.ReadDouble();
            break;
          }
          case 65: {
            FinishDate = input.ReadDouble();
            break;
          }
          case 74: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 17: {
            Value = input.ReadDouble();
            break;
          }
          case 26: {
            TraceId = input.ReadString();
            break;
          }
          case 34: {
            SpanId = input.ReadString();
            break;
          }
          case 42: {
            ParentSpanId = input.ReadString();
            break;
          }
          case 50: {
            Service = input.ReadString();
            break;
          }
          case 57: {
            StartDate = input.ReadDouble();
            break;
          }
          case 65: {
            FinishDate = input.ReadDouble();
            break;
          }
          case 74: {
            tags_.AddEntriesFrom(ref input, _repeated_tags_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the TraceMetric message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Tag : pb::IMessage<Tag>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Tag> _parser = new pb::MessageParser<Tag>(() => new Tag());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Tag> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Interception.OpenTracing.MetricProxy.TraceMetric.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Tag() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Tag(Tag other) : this() {
          name_ = other.name_;
          value_ = other.value_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Tag Clone() {
          return new Tag(this);
        }

        /// <summary>Field number for the "Name" field.</summary>
        public const int NameFieldNumber = 1;
        private readonly static string NameDefaultValue = "";

        private string name_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_ ?? NameDefaultValue; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "Name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasName {
          get { return name_ != null; }
        }
        /// <summary>Clears the value of the "Name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearName() {
          name_ = null;
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 2;
        private readonly static string ValueDefaultValue = "";

        private string value_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Value {
          get { return value_ ?? ValueDefaultValue; }
          set {
            value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "value" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasValue {
          get { return value_ != null; }
        }
        /// <summary>Clears the value of the "value" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearValue() {
          value_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Tag);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Tag other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if (Value != other.Value) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasName) hash ^= Name.GetHashCode();
          if (HasValue) hash ^= Value.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasName) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (HasValue) {
            output.WriteRawTag(18);
            output.WriteString(Value);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasName) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (HasValue) {
            output.WriteRawTag(18);
            output.WriteString(Value);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasName) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (HasValue) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Tag other) {
          if (other == null) {
            return;
          }
          if (other.HasName) {
            Name = other.Name;
          }
          if (other.HasValue) {
            Value = other.Value;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 18: {
                Value = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 18: {
                Value = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
